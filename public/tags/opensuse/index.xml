<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>opensuse on Zoltán&#39;s Blog</title>
    <link>https://bzoltan1.github.io/tags/opensuse/</link>
    <description>Recent content in opensuse on Zoltán&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>zoltan.balogh@suse.com (Zoltán Balogh)</managingEditor>
    <webMaster>zoltan.balogh@suse.com (Zoltán Balogh)</webMaster>
    <copyright>© Zoltán Balogh 2021</copyright>
    <lastBuildDate>Sat, 04 Mar 2023 03:27:12 +0300</lastBuildDate><atom:link href="https://bzoltan1.github.io/tags/opensuse/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cross build and packaging</title>
      <link>https://bzoltan1.github.io/cross-build-and-packaging/</link>
      <pubDate>Sat, 04 Mar 2023 03:27:12 +0300</pubDate>
      <author>zoltan.balogh@suse.com (Zoltán Balogh)</author>
      <guid>https://bzoltan1.github.io/cross-build-and-packaging/</guid>
      <description>Introduction Let&amp;rsquo;s start by clarifying what we mean by cross-building and cross-packaging. Cross-compilation is the process of compiling source code on one platform, called the host, in order to generate an executable binary for a different target platform. The emphasis here is on the word &amp;ldquo;different&amp;rdquo;. The target platform may have a different CPU architecture, such as when we work on an x86 computer and want to build software for a Raspberry Pi board with an ARM CPU.</description>
    </item>
    
    <item>
      <title>Reverse dependencies</title>
      <link>https://bzoltan1.github.io/reverse-dependencies/</link>
      <pubDate>Wed, 01 Feb 2023 19:15:12 +0300</pubDate>
      <author>zoltan.balogh@suse.com (Zoltán Balogh)</author>
      <guid>https://bzoltan1.github.io/reverse-dependencies/</guid>
      <description>As start let&amp;rsquo;s sort it out what is dependency and what is reverse dependency. Dependencies and reverse dependencies in Linux distributions are important concepts to understand. A package dependency means that another package relies on it in order to function. For example, if package B requires package A to be installed in order to work, then package B is dependent on package A and is considered a reverse dependency of package A.</description>
    </item>
    
    <item>
      <title>Build system statistics</title>
      <link>https://bzoltan1.github.io/build-system-statistics/</link>
      <pubDate>Fri, 06 Jan 2023 04:41:11 +0300</pubDate>
      <author>zoltan.balogh@suse.com (Zoltán Balogh)</author>
      <guid>https://bzoltan1.github.io/build-system-statistics/</guid>
      <description>From time to time we should ask ourselves how are we doing. Are we successful, are we on the right track, are we heading to the right direction, are we fast enough, are we accelerating or slowing down?
This time I am talking about the openSUSE Linux Distribution and about the SUSE Linux Enterprise Server.
And here I quickly would like to note an important disclaimer with a short story.</description>
    </item>
    
    <item>
      <title>Checking changelogs with zypper</title>
      <link>https://bzoltan1.github.io/checking-changelogs-with-zypper/</link>
      <pubDate>Fri, 11 Nov 2022 11:11:11 +0300</pubDate>
      <author>zoltan.balogh@suse.com (Zoltán Balogh)</author>
      <guid>https://bzoltan1.github.io/checking-changelogs-with-zypper/</guid>
      <description>I have heard way to often the question from Linux and specially SUSE Linux users that &amp;ldquo;How can I check the changelog of a package or new version of a package available on the repository, but not yet installed&amp;rdquo;.
There was no easy answer for that question, so I have decided to make a little tool for that.
How it is done All the enabled repositories have a bunch of configuration files in a well structured directory tree under the /var/cache/zypp/raw/.</description>
    </item>
    
    <item>
      <title>Data visualization with Grafana and Telegraf</title>
      <link>https://bzoltan1.github.io/data-visualization-with-grafana-and-telegraf/</link>
      <pubDate>Thu, 06 Oct 2022 20:32:50 +0300</pubDate>
      <author>zoltan.balogh@suse.com (Zoltán Balogh)</author>
      <guid>https://bzoltan1.github.io/data-visualization-with-grafana-and-telegraf/</guid>
      <description>It all started when&amp;hellip; Few weeks ago we have decided to create a dashboard where we can monitor the status of the SUSE Linux Enterprise maintenance update queue. Naturally there are tons of cool open source solutions to build this type of monitoring. Two decades ago I probably would have written a Perl or Python based monitoring script for the monitoring part and use the good old gnuplot (http://www.gnuplot.info/) to visualize the data and create an active page written in some silly web UI framework.</description>
    </item>
    
    <item>
      <title>Contributing to SLE/openSUSE</title>
      <link>https://bzoltan1.github.io/contributing-to-sle/opensuse/</link>
      <pubDate>Sat, 19 Feb 2022 06:42:50 +0300</pubDate>
      <author>zoltan.balogh@suse.com (Zoltán Balogh)</author>
      <guid>https://bzoltan1.github.io/contributing-to-sle/opensuse/</guid>
      <description>The motivation of this post is to demonstrate how easy and logical is the workflow of an upstream change in a project to a given SUSE Linux codestream. I try to write this post in a codestream agnostic way. As I have experienced the workflow from the package maintainer point of view is the same for SUSE:SLE-15:Update and for openSUSE:Factory.
What I want to do It all starts with a Bugzilla case.</description>
    </item>
    
    <item>
      <title>Playing with Shelly</title>
      <link>https://bzoltan1.github.io/playing-with-shelly/</link>
      <pubDate>Tue, 28 Dec 2021 10:35:50 +0300</pubDate>
      <author>zoltan.balogh@suse.com (Zoltán Balogh)</author>
      <guid>https://bzoltan1.github.io/playing-with-shelly/</guid>
      <description>For xmass I got few Shelly lamps to play with. Shelly lamps are simple IoT devices. Super easy to install, configure and use. The Youtube is full with instructions on what can be done with these smart lamps. Naturally my main motivation was to figure out how to hack these devices and how ready my openSUSE servers are with tools and services (spoiler: they are ready)
Look daddy no cloud Needless to say that like most smart home automation devices the Shelly lamps can be operated via the Shelly cloud.</description>
    </item>
    
    <item>
      <title>Measuring web traffic with Matomo</title>
      <link>https://bzoltan1.github.io/measuring-web-traffic-with-matomo/</link>
      <pubDate>Thu, 22 Apr 2021 20:40:57 +0300</pubDate>
      <author>zoltan.balogh@suse.com (Zoltán Balogh)</author>
      <guid>https://bzoltan1.github.io/measuring-web-traffic-with-matomo/</guid>
      <description>Matomo is an open source PHP/MySQL based web analytics application to track online visits to websites and displays reports on these visits. It does what Google Analytics does, but it is open source. Matomo has commercial cloud based offering for those who do not want to host their own instance but the code is there on GitHub (https://github.com/matomo-org/matomo) for anyone who is interested.
I decided to first test drive the cloud based solution and then install my own instance.</description>
    </item>
    
    <item>
      <title>Private cloud based on openSUSE Leap 15.3 beta and Nextcloud</title>
      <link>https://bzoltan1.github.io/private-cloud-based-on-opensuse-leap-15.3-beta-and-nextcloud/</link>
      <pubDate>Mon, 05 Apr 2021 19:36:57 +0300</pubDate>
      <author>zoltan.balogh@suse.com (Zoltán Balogh)</author>
      <guid>https://bzoltan1.github.io/private-cloud-based-on-opensuse-leap-15.3-beta-and-nextcloud/</guid>
      <description>Motivation I used to have a Synology DS414 server what worked well for about 8 years. Naturally, occasionally I had to change disks in the RAID5 system in it, but other than that it did its job. But regardless of the really smooth user experience and the low maintenance needs I never really liked that system as the Synology Disk Station Manager OS is not like many &amp;ldquo;real&amp;rdquo; Linux distributions and the community behind that OS is basically non existent.</description>
    </item>
    
    <item>
      <title>Setup a Blog With Github Pages and Hugo</title>
      <link>https://bzoltan1.github.io/setup-a-blog-with-github-pages-and-hugo/</link>
      <pubDate>Mon, 05 Apr 2021 19:36:57 +0300</pubDate>
      <author>zoltan.balogh@suse.com (Zoltán Balogh)</author>
      <guid>https://bzoltan1.github.io/setup-a-blog-with-github-pages-and-hugo/</guid>
      <description>GitHub pages are super powerful and very easy to use for creating markdown based static websites.
In this post I will walk through how I made this very page.
My setup will be two GitHub repositories, one for the source of the page (https://github.com/bzoltan1/blog-source) and the other where the html artifacts are deployed (https://github.com/bzoltan1/bzoltan1.github.io)
Here I would like to note that it is possible to use a single repository with two branches, one for holding the the source and the other where the website is deployed.</description>
    </item>
    
    <item>
      <title>Telegram Bridge</title>
      <link>https://bzoltan1.github.io/telegram-bridge/</link>
      <pubDate>Mon, 05 Apr 2021 19:36:57 +0300</pubDate>
      <author>zoltan.balogh@suse.com (Zoltán Balogh)</author>
      <guid>https://bzoltan1.github.io/telegram-bridge/</guid>
      <description>Motivation I got lucky with my original hackweek project and I have managed to set up my Leap 15.3 based NAS and private cloud running on NextCloud earlier than planned.
So I though that as an extra project I will set up a proper system monitoring service. The monit service is very handy (thanks for the idea to Paolo Stivanin) but by default it wants to send emails when something goes wrong.</description>
    </item>
    
  </channel>
</rss>
