<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on Zoltán&#39;s Blog</title>
    <link>https://bzoltan1.github.io/tags/linux/</link>
    <description>Recent content in linux on Zoltán&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>zoltan.balogh@suse.com (Zoltán Balogh)</managingEditor>
    <webMaster>zoltan.balogh@suse.com (Zoltán Balogh)</webMaster>
    <copyright>© Zoltán Balogh 2021</copyright>
    <lastBuildDate>Sat, 04 Mar 2023 03:27:12 +0300</lastBuildDate><atom:link href="https://bzoltan1.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cross build and packaging</title>
      <link>https://bzoltan1.github.io/cross-build-and-packaging/</link>
      <pubDate>Sat, 04 Mar 2023 03:27:12 +0300</pubDate>
      <author>zoltan.balogh@suse.com (Zoltán Balogh)</author>
      <guid>https://bzoltan1.github.io/cross-build-and-packaging/</guid>
      <description>Introduction Let&amp;rsquo;s start by clarifying what we mean by cross-building and cross-packaging. Cross-compilation is the process of compiling source code on one platform, called the host, in order to generate an executable binary for a different target platform. The emphasis here is on the word &amp;ldquo;different&amp;rdquo;. The target platform may have a different CPU architecture, such as when we work on an x86 computer and want to build software for a Raspberry Pi board with an ARM CPU.</description>
    </item>
    
    <item>
      <title>Reverse dependencies</title>
      <link>https://bzoltan1.github.io/reverse-dependencies/</link>
      <pubDate>Wed, 01 Feb 2023 19:15:12 +0300</pubDate>
      <author>zoltan.balogh@suse.com (Zoltán Balogh)</author>
      <guid>https://bzoltan1.github.io/reverse-dependencies/</guid>
      <description>As start let&amp;rsquo;s sort it out what is dependency and what is reverse dependency. Dependencies and reverse dependencies in Linux distributions are important concepts to understand. A package dependency means that another package relies on it in order to function. For example, if package B requires package A to be installed in order to work, then package B is dependent on package A and is considered a reverse dependency of package A.</description>
    </item>
    
    <item>
      <title>Build system statistics</title>
      <link>https://bzoltan1.github.io/build-system-statistics/</link>
      <pubDate>Fri, 06 Jan 2023 04:41:11 +0300</pubDate>
      <author>zoltan.balogh@suse.com (Zoltán Balogh)</author>
      <guid>https://bzoltan1.github.io/build-system-statistics/</guid>
      <description>From time to time we should ask ourselves how are we doing. Are we successful, are we on the right track, are we heading to the right direction, are we fast enough, are we accelerating or slowing down?
This time I am talking about the openSUSE Linux Distribution and about the SUSE Linux Enterprise Server.
And here I quickly would like to note an important disclaimer with a short story.</description>
    </item>
    
    <item>
      <title>Checking changelogs with zypper</title>
      <link>https://bzoltan1.github.io/checking-changelogs-with-zypper/</link>
      <pubDate>Fri, 11 Nov 2022 11:11:11 +0300</pubDate>
      <author>zoltan.balogh@suse.com (Zoltán Balogh)</author>
      <guid>https://bzoltan1.github.io/checking-changelogs-with-zypper/</guid>
      <description>I have heard way to often the question from Linux and specially SUSE Linux users that &amp;ldquo;How can I check the changelog of a package or new version of a package available on the repository, but not yet installed&amp;rdquo;.
There was no easy answer for that question, so I have decided to make a little tool for that.
How it is done All the enabled repositories have a bunch of configuration files in a well structured directory tree under the /var/cache/zypp/raw/.</description>
    </item>
    
    <item>
      <title>Data visualization with Grafana and Telegraf</title>
      <link>https://bzoltan1.github.io/data-visualization-with-grafana-and-telegraf/</link>
      <pubDate>Thu, 06 Oct 2022 20:32:50 +0300</pubDate>
      <author>zoltan.balogh@suse.com (Zoltán Balogh)</author>
      <guid>https://bzoltan1.github.io/data-visualization-with-grafana-and-telegraf/</guid>
      <description>It all started when&amp;hellip; Few weeks ago we have decided to create a dashboard where we can monitor the status of the SUSE Linux Enterprise maintenance update queue. Naturally there are tons of cool open source solutions to build this type of monitoring. Two decades ago I probably would have written a Perl or Python based monitoring script for the monitoring part and use the good old gnuplot (http://www.gnuplot.info/) to visualize the data and create an active page written in some silly web UI framework.</description>
    </item>
    
    <item>
      <title>Audio controlled Shelly devices</title>
      <link>https://bzoltan1.github.io/audio-controlled-shelly-devices/</link>
      <pubDate>Mon, 13 Jun 2022 17:32:50 +0300</pubDate>
      <author>zoltan.balogh@suse.com (Zoltán Balogh)</author>
      <guid>https://bzoltan1.github.io/audio-controlled-shelly-devices/</guid>
      <description>The idea came from Tina Müller who was giving and awesome demo of the Vosk library. I quickly checked out the Alphacephei pages.
I fundamentally like when a cool library has Python APIs.
Vosk is an offline open source speech recognition toolkit. It enables speech recognition for lots of languages. The vosk models are small (50 Mb) but still provide continuous large vocabulary transcription, zero-latency response with streaming API.
Installing vosk library on my openSUSE Tumbleweed goes like</description>
    </item>
    
    <item>
      <title>Telegram Bridge</title>
      <link>https://bzoltan1.github.io/telegram-bridge/</link>
      <pubDate>Mon, 05 Apr 2021 19:36:57 +0300</pubDate>
      <author>zoltan.balogh@suse.com (Zoltán Balogh)</author>
      <guid>https://bzoltan1.github.io/telegram-bridge/</guid>
      <description>Motivation I got lucky with my original hackweek project and I have managed to set up my Leap 15.3 based NAS and private cloud running on NextCloud earlier than planned.
So I though that as an extra project I will set up a proper system monitoring service. The monit service is very handy (thanks for the idea to Paolo Stivanin) but by default it wants to send emails when something goes wrong.</description>
    </item>
    
    <item>
      <title>[Attackdefense.com] Privilege Escalation</title>
      <link>https://bzoltan1.github.io/write-up/attackdefense.com-privilege-escalation/</link>
      <pubDate>Sun, 30 Aug 2020 18:17:00 +0700</pubDate>
      <author>zoltan.balogh@suse.com (Zoltán Balogh)</author>
      <guid>https://bzoltan1.github.io/write-up/attackdefense.com-privilege-escalation/</guid>
      <description>Link https://attackdefense.com/challengedetails?cid=2021
Student to Teacher Find SUID binaries Using ‘Strings’ to view
When we run the read-submission file. It will call and run the read-file. Read file is a binary file. We will use the PATH variable method
First create another read-file executable file in / tmp with the content to generate a shell. Then use export to append the $ PATH variable. Then run the read-submission file. Because of the teacher’s suid, when running will generate the teacher’s shell:</description>
    </item>
    
  </channel>
</rss>
